<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meeting Room</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato&family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    />
    <style>
      body {
        font-family: "Lato";
        padding: 20px;
        /* background-color: lightcoral; */
      }
      h1 {
        font-family: "Poppins";
      }

      .button-spacing {
        margin-right: 10px;
      }

      canvas {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1 class="text-center mb-5">Your video is getting streamed</h1>
    </div>

    <div class="d-flex justify-content-center">
      <video class="rounded" id="left-video" autoplay muted></video>
    </div>

    <canvas id="canvas" width="640" height="480"></canvas>
    <audio id="remote-audio" autoplay></audio>

    <script>
      console.log("<%= roomId %>");
      console.log("<%= username %>");
      console.log("<%= age %>");
      console.log("<%= gender %>");
      console.log("<%= leftDeviceId %>");
      console.log("<%= rightDeviceId %>");

      const roomId = "<%= roomId %>";
      const peerConnections = {};
      let ws = new WebSocket("ws://localhost:9000");

      let localStream;
      let webSocketConnected = false;

      const configuration = {
        iceServers: [
          { urls: "stun:34.131.23.90:3478" },
          {
            urls: "turn:34.131.23.90:3478",
            username: "turnuser",
            credential: "turn456",
          },
        ],
      };
      const peerConnection = new RTCPeerConnection(configuration);

      async function makeOffer() {
        const offer = await peerConnection.createOffer();
        console.log("offer", offer);
        await peerConnection.setLocalDescription(offer);

        console.log("roomid", roomId);

        ws.send(
          JSON.stringify({
            type: "broadcast",
            room: roomId,
            msg: offer,
            msgType: "offer",
          })
        );
      }

      ws.addEventListener("open", async function () {
        console.log("connected with websocket");
        webSockedConnected = true;

        const roomId = "<%= roomId %>";
        const username = " <%= username %>";
        const gender = " <%= gender %>";
        const age = "<%= age %>";

        console.log(username);

        ws.send(
          JSON.stringify({
            type: "join",
            name: username,
            room: roomId,
            gender: gender,
            age: age,
          })
        );

        setTimeout(await makeOffer, 2000);
        setTimeout(makeOffer, 5000);
        setTimeout(makeOffer, 5000);
        // await makeOffer();

        await getMediaAccess();
      });

      ws.addEventListener("message", async function ({ data }) {
        const obj = JSON.parse(data);

        if (obj.username !== undefined) {
          console.log("client got user object", obj);
          sessionStorage.setItem("user", obj.username);
          sessionStorage.setItem("roomId", obj.roomId);
          sessionStorage.setItem("userId", obj.userId);
          sessionStorage.setItem("gender", obj.gender);
          sessionStorage.setItem("age", obj.age);
        }

        if (obj.msgType === "offer") {
          console.log("client got an offer!");
        }

        if (obj.msgType === "candidate") {
          if (obj.candidate) {
            try {
              const candObj = new RTCIceCandidate({
                candidate: obj.candidate,
                sdpMid: obj.sdpmid,
                sdpMLineIndex: obj.sdpmlineindex,
              });
              await peerConnection.addIceCandidate(candObj);
              console.log("added a ice candidate on local!");
            } catch (e) {
              console.error("Error adding received ice candidate", e);
            }
          }
        }

        if (obj.msgType === "answer") {
          if (obj.name !== "prabhsurat") {
            console.log(obj.msg);
            const remoteDesc = new RTCSessionDescription(obj.msg);
            await peerConnection.setRemoteDescription(remoteDesc);
            console.log("answer set on client", obj.msg);

            await getMediaAccess();
          }
        }
      });

      peerConnection.addEventListener("icecandidate", (event) => {
        if (event.candidate) {
          console.log("got an ice candidate on local");
          console.log(event.candidate);
          ws.send(
            JSON.stringify({
              type: "broadcast",
              room: roomId,
              msgType: "candidate",
              candidate: event.candidate.candidate,
              sdpmid: event.candidate.sdpMid,
              sdpmlineindex: event.candidate.sdpmlineindex,
            })
          );
        }
      });

      peerConnection.addEventListener("track", (event) => {
        // Attach the received streams (event.streams[0]) to an HTML video element
        const [remoteStream] = event.streams; // Extract the stream
        console.log("remote stream", remoteStream);

        // If you want to handle audio separately (optional)
        const audioElement = document.getElementById("remote-audio");
        audioElement.srcObject = remoteStream; // Can use the same stream
        console.log("audio tracks received");
      });

      async function sendFrameToAPI(base64Image) {
        const payload = {
          image: base64Image,
        };

        const API_ENDPOINT = "http://localhost:8000/process_frame";

        try {
          const response = await fetch(API_ENDPOINT, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
          });

          if (response.ok) {
            console.log("Frame successfully sent!");
          } else {
            console.error(
              "Failed to send frame:",
              response.status,
              response.statusText
            );
          }
        } catch (error) {
          console.error("Error sending frame:", error);
        }
      }

      async function getMediaAccess() {
        const leftDeviceId = "<%= leftDeviceId %>";
        const rightDeviceId = "<%= rightDeviceId %>";

        navigator.mediaDevices
          .getUserMedia({
            video: {
              deviceId: leftDeviceId,
            },
            audio: true,
          })
          .then(async function (camOneStream) {
            const vid1 = document.getElementById("left-video");
            canvas = document.getElementById("canvas");
            const context = canvas.getContext("2d");
            vid1.srcObject = camOneStream;

            setInterval(async function () {
              context.drawImage(vid1, 0, 0, canvas.width, canvas.height);
              const base64Image = canvas.toDataURL("image/jpeg", 0.7);

              // Send the frame to the API
              await sendFrameToAPI(base64Image);
            }, 2000);

            camOneStream.getTracks().forEach((track) => {
              peerConnection.addTrack(track, camOneStream);
              console.log("added tracks to peerConnection");
            });
          });
      }

      /**
             * code for merged stream for creating SBS(SIDE BY SIDE VIEW)
             * 
             * /
            
            // navigator.mediaDevices
            //   .getUserMedia({
            //     video: {
            //       deviceId: rightDeviceId,
            //       // width: { ideal: 1280 }, // setting ideal resolutions and fps for the stream which the browser will always try for
            //       // height: { ideal: 720 }, // adaptive bitrate streaming by webrtc out of the box
            //       // frameRate: { ideal: 30, max: 60 },
            //     },
            //     audio: false,
            //   })
            //   .then((camTwoStream) => {
            //     const vid2 = document.getElementById("right-video");

            //     vid2.srcObject = camTwoStream;

            //     var merger = new VideoStreamMerger();

            //     merger.addStream(camOneStream, {
            //       x: 0, // position of the topleft corner
            //       y: 0,
            //       width: merger.width / 2,
            //       height: merger.height,
            //       mute: false, // we don't want sound from the screen (if there is any)
            //     });

            //     merger.addStream(camTwoStream, {
            //       x: merger.width / 2,
            //       y: 0,
            //       width: merger.width / 2,
            //       height: merger.height,
            //       mute: true,
            //     });

            //     merger.start();

            //     var mergedStream = merger.result; // the resulting merge stream

            //     // mergedStream.getTracks().forEach((track) => {
            //     //   peerConnection.addTrack(track, mergedStream);
            //     //   console.log("added merged tracks to peerConnection");
            //     // });

            //     const mergedVid = document.getElementById("merged-video");

            //     // mergedVid.srcObject = mergedStream;
            //   });
          });
      }
      /**
       * functions for debugging purpose
       * 
       * 
       */

      // const btn = document.getElementById("offer-btn");
      // btn.addEventListener("click", async function () {
      //   await makeOffer();
      // });

      // const trackBtn = document.getElementById("track-btn");
      // trackBtn.addEventListener("click", async function () {
      //   await getMediaAccess();
      // });
    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  </body>
</html>
