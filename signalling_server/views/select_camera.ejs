<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Select Camera</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato&family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    />
    <style>
      body {
        font-family: "Lato";
        padding: 20px;
      }
      h1 {
        font-family: "Poppins";
      }
      .video-container {
        max-width: 400px; /* Adjust max width as needed */
        margin: auto; /* Center the video container */
      }
    </style>
  </head>
  <body>
    <div class="container"></div>
      <h1 class="text-center mb-5">Select Left and Right Cameras for best experience</h1>
    </div>

    <div class="row mt-5 mb-5">
      <div class="col-md-4 video-container">
        <video
          class="w-100 mb-2 rounded"
          id="left-video"
          poster="assets/placeholder.jpg"
          autoplay
          muted
        ></video>

        <select
          name="left-camera"
          id="left-select"
          class="form-select mb-5"
          required
        ></select>
      </div>
      <div class="col-md-4 video-container">
        <video
          class="w-100 rounded"
          id="right-video"
          poster="assets/placeholder.jpg"
          autoplay
          muted
        ></video>

        <select
          name="right-camera"
          id="right-select"
          class="form-select mb-5"
          required
        ></select>
      </div>
    </div>

    <div class="text-center mt-5">
      <button onclick="navigateToRoom()" class="btn btn-primary px-4">
        Join
      </button>
    </div>
    <script>
      function navigateToRoom() {
        const roomId = "<%= roomId %>";
        const username = " <%= username %>";
        const gender = " <%= gender %>";
        const age = "<%= age %>";
        const leftSelect = document.getElementById("left-select");
        const leftDeviceId = leftSelect.options[leftSelect.selectedIndex].value;

        const rightSelect = document.getElementById("right-select");
        const rightDeviceId =
          rightSelect.options[rightSelect.selectedIndex].value;

        // console.log(leftDeviceId);
        // console.log(rightDeviceId);
        // console.log(roomId);
        // console.log(username);
        // console.log(gender);
        // console.log(age);

        // Construct the URL with parameters
        var url =
          "/room?leftDevice=" +
          encodeURIComponent(leftDeviceId) +
          "&rightDevice=" +
          encodeURIComponent(rightDeviceId) +
          "&roomId=" +
          encodeURIComponent(roomId) +
          "&username=" +
          encodeURIComponent(username) +
          "&gender=" +
          encodeURIComponent(gender) +
          "&age=" +
          encodeURIComponent(age);

        // Navigate to the new page
        window.location.href = url;
      }

      // Function to ask for media permissions (camera)
      async function askForPermissions() {
        try {
          await navigator.mediaDevices.getUserMedia({
            video: true,
          });
        } catch (error) {
          console.error(
            "Permission denied or no video input available:",
            error
          );
        }
      }

      // Function to get the available video input devices
      async function getCameraDevices() {
        await askForPermissions();
        const allDevices = await navigator.mediaDevices.enumerateDevices();
        const cameraDevices = [];
        for (let i = 0; i < allDevices.length; i++) {
          const device = allDevices[i];
          if (device.kind === "videoinput") {
            cameraDevices.push(device);
          }
        }
        return cameraDevices; // Array containing all video inputs
      }

      // Function to populate the camera dropdown
      async function populateCameraSelection() {
        const lSelect = document.getElementById("left-select");
        const rSelect = document.getElementById("right-select");

        const cameraDevices = await getCameraDevices();

        cameraDevices.forEach((device, index) => {
          // Create option for left select
          const lOption = document.createElement("option");
          lOption.value = device.deviceId;
          lOption.text = device.label || `Camera ${index + 1}`;
          lSelect.appendChild(lOption);

          // Create a separate option for right select
          const rOption = document.createElement("option");
          rOption.value = device.deviceId;
          rOption.text = device.label || `Camera ${index + 1}`;
          rSelect.appendChild(rOption);
        });
        // Set the first camera as default
        // if (cameraDevices.length > 0) {
        updateVideoSource(
          cameraDevices[0].deviceId,
          document.getElementById("left-video")
        );
        updateVideoSource(
          cameraDevices[0].deviceId,
          document.getElementById("right-video")
        );
        // }
      }

      // Function to update the video source based on camera selection
      async function updateVideoSource(deviceId, videoEle) {
        // const videoElement = document.getElementById("left-video");

        // Stop any previous stream if it's active
        if (videoEle.srcObject) {
          videoEle.srcObject.getTracks().forEach((track) => track.stop());
        }

        // Start video stream from the selected device
        const stream = await navigator.mediaDevices.getUserMedia({
          video: { deviceId: { exact: deviceId } },
        });

        // Set the new stream as the video source
        videoEle.srcObject = stream;
      }

      // Event listener for camera selection changes
      document
        .getElementById("left-select")
        .addEventListener("change", (event) => {
          updateVideoSource(
            event.target.value,
            document.getElementById("left-video")
          ); // Update video source when selection changes
        });

      document
        .getElementById("right-select")
        .addEventListener("change", (event) => {
          updateVideoSource(
            event.target.value,
            document.getElementById("right-video")
          ); // Update video source when selection changes
        });

      // Populate the camera selection dropdown on page load
      populateCameraSelection();
    </script>
  </body>
</html>
